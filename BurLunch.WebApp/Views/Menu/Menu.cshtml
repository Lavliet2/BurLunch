@model BurLunch.WebApp.Models.MenuWithTablesViewModel

<div class="row">
    <!-- Секция меню и доступных столов -->
    <div class="col-lg-12 mt-5">
        <h2 class="text-uppercase mb-4" style="color: #CE0E2D; font-weight: bold;">Меню на @ViewBag.Date.ToString("dd.MM.yyyy")</h2>
        @if (Model.Menu == null || !Model.Menu.Dishes.Any())
        {
            <div class="alert alert-warning text-center" role="alert">
                На эту дату нет доступных блюд.
            </div>
        }
        else
        {
            <div class="row">
                <!-- Меню -->
                <div class="col-lg-8">
                    <div class="d-flex flex-wrap gap-4 justify-content-start">
                        @foreach (var dishType in Model.Menu.Dishes.GroupBy(d => d.DishType))
                        {
                            <div class="card shadow-sm" style="width: 18rem; flex: 0 0 auto;">
                                <div class="card-header bg-danger text-white text-center">
                                    <h5 class="mb-0">@dishType.Key</h5>
                                </div>
                                <div class="card-body">
                                    <ul class="list-unstyled">
                                        @foreach (var dish in dishType)
                                        {
                                            <li class="mb-3">
                                                <div class="form-check">
                                                    <input class="form-check-input dish-radio" type="radio"
                                                           name="selectedDish_@dishType.Key"
                                                           id="dish-@dish.Id"
                                                           value="@dish.Id" />
                                                    <label class="form-check-label" for="dish-@dish.Id">
                                                        <strong>@dish.Name</strong>
                                                        <div class="text-muted fst-italic" style="font-size: 0.9rem;">@dish.Description</div>
                                                    </label>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Доступные столы -->
                <div class="col-lg-4">
                    <div class="card shadow-sm">
                        <div class="card-header bg-danger text-white text-center">
                            <h5 class="mb-0">Доступные столы</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            @foreach (var table in Model.Tables)
                            {
                                <li class="list-group-item">
                                    <div class="form-check">
                                        <input class="form-check-input table-radio" type="radio"
                                               name="selectedTable"
                                               id="table-@table.Id"
                                               value="@table.Id" />
                                        <label class="form-check-label" for="table-@table.Id">
                                            <strong>Стол №@table.Id</strong> — @table.Seats мест
                                        </label>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Кнопка сохранения выбора -->
    <div class="col-lg-12 mt-4 text-center">
        <button type="button" id="submitSelectionBtn" class="btn btn-danger">
            Сохранить выбор
        </button>
    </div>

    <!-- Секция текущих бронирований -->
    <!-- Секция текущих бронирований -->
    <div class="col-lg-12 mt-5">
        <div class="card shadow-sm" style="background-color: #CE0E2D; border-radius: 4px;">
            <div class="card-header text-white text-center" style="background-color: #CE0E2D; border-radius: 4px;">
                <h2 class="mb-0" style="font-size: 1.5rem; font-weight: bold;">Список бронирований</h2>
            </div>
        </div>
        <div class="table-responsive reservationsList mt-3">
            <table class="table table-bordered">
                <thead style="background-color: #CE0E2D; color: white;">
                    <tr>
                        <th style="text-align: center; font-weight: bold;">Стол</th>
                        <th style="text-align: center; font-weight: bold;">Имя пользователя</th>
                        <th style="text-align: center; font-weight: bold;">ID пользователя</th>
                        @foreach (var dishType in Model.Menu.Dishes
                        .Select(d => d.DishType)
                        .Distinct())
                        {
                            <th style="text-align: center; font-weight: bold;">@dishType</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Reservations == null || !Model.Reservations.Any())
                    {
                        <tr>
                            <td colspan="100%" class="text-center">Бронирований пока нет.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var reservation in Model.Reservations)
                        {
                            <tr>
                                <td><strong>Стол №@reservation.Table.Id</strong></td>
                                <td>@reservation.UserName</td>
                                <td>@reservation.UserId</td>
                                @foreach (var dishType in Model.Menu.Dishes.Select(d => d.DishType).Distinct())
                                {
                                    <td>
                                        @string.Join(", ", reservation.SelectedDishes
                                                 .Where(d => d.DishType == dishType)
                                                 .Select(d => d.Name))
                                    </td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const submitSelectionBtn = document.getElementById("submitSelectionBtn");
        const scheduleId = parseInt("@Model.ScheduleId", 10);

        // Функция загрузки списка бронирований
        function fetchAndDisplayReservations(scheduleId) {
            fetch(`/api/TableReservation/reservations/${scheduleId}`)
                .then(response => {
                    if (!response.ok) {
                        console.error("Ошибка API:", response.status, response.statusText);
                        return [];
                    }
                    return response.json();
                })
                .then(reservations => {
                    console.log("Полученные бронирования:", reservations);

                    const reservationsList = document.getElementById("reservationsList");
                    if (!reservationsList) {
                        console.error("Элемент reservationsList не найден в DOM.");
                        return;
                    }

                    reservationsList.innerHTML = ""; // Очищаем список перед обновлением

                    if (reservations.length === 0) {
                        reservationsList.innerHTML = "<div class='alert alert-warning text-center'>Бронирований пока нет.</div>";
                        return;
                    }

                    reservations.forEach(reservation => {
                        const item = document.createElement("div");
                        item.classList.add("list-group-item", "p-3", "shadow-sm", "rounded", "mb-2");
                        item.style.border = "1px solid #CE0E2D";

                        item.innerHTML = `
                            <h5><strong>Стол №${reservation.Table.Id}</strong> — ${reservation.SeatsReserved} мест</h5>
                            <p class="mb-1">Забронировано пользователем: <span class="text-danger">${reservation.UserName || "Неизвестно"}</span></p>
                            <p class="mb-1">Время: <span class="text-muted">${new Date(reservation.ReservationTime).toLocaleString()}</span></p>
                            <strong>Выбранные блюда:</strong>
                            <ul class="mt-2">
                                ${reservation.SelectedDishes.map(dish => `<li>${dish.Name} — <span class="text-muted">${dish.Description}</span></li>`).join('')}
                            </ul>
                        `;

                        reservationsList.appendChild(item);
                    });
                })
                .catch(error => console.error("Ошибка при загрузке бронирований:", error));
        }

        // Загрузка списка бронирований при загрузке страницы
        fetchAndDisplayReservations(scheduleId);

        // Обработка сохранения выбора
        submitSelectionBtn.addEventListener("click", function () {
            const selectedDishes = Array.from(document.querySelectorAll(".dish-radio:checked"))
                .map(radio => parseInt(radio.value, 10));

            const selectedTable = document.querySelector(".table-radio:checked");

            if (!selectedTable || selectedDishes.length === 0) {
                alert("Пожалуйста, выберите стол и хотя бы одно блюдо.");
                return;
            }

            const payload = {
                scheduleId: scheduleId,
                tableId: parseInt(selectedTable.value, 10),
                dishIds: selectedDishes,
                seatsReserved: 1
            };

            console.log("Отправляемые данные:", payload);

            fetch('/Menu/SaveSelection', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (response.ok) {
                    alert("Выбор успешно сохранён!");
                    fetchAndDisplayReservations(scheduleId); // Обновляем список бронирований
                } else {
                    response.text().then(text => alert(`Ошибка: ${text}`));
                }
            })
            .catch(error => console.error("Ошибка при отправке данных:", error));
        });
    });
</script>

</script>
